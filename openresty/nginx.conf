worker_processes 1;


events {
  worker_connections 1024;
}

http {
  limit_req_zone key=$jwt_req_zone zone=zone_with_token:1m rate=1r/m;
  limit_req_zone key=$no_key zone=no_token:1m rate=10r/m;


  lua_package_path "lua-resty-jwt-0.2.3/lib/?.lua;lua-resty-jwt-0.2.3/third-party/lua-resty-hmac-0.05/lib/?.lua;lua-resty-jwt-0.2.3/third-party/lua-resty-openssl-0.7.2/lib/?.lua;;";



  server {
    listen 8080 reuseport;

    limit_req_dry_run  on;

    location = /verify {

      set_by_lua_block $jwt_req_zone {
          local cjson = require "cjson"
          local jwt = require "resty.jwt"
          local open = io.open

          local file = open('/secrets/public_key.pem', "rb") -- r read mode and b binary mode
          if not file then return nil end
          local secret = file:read "*a" -- *a or *all reads the whole file
          file:close()


          local jwt_token = ngx.var.cookie_JWT

          local jwt_obj = jwt:verify(secret, jwt_token)

          if (jwt_obj.valid and jwt_obj.verified) then
            return jwt_obj.payload.nonce
          else
            return ""
          end
      }
      set_by_lua_block $missingToken {
        h = ngx.var.jwt_req_zone
        if (h == nil or h == "") then
          return "true"
        else
          return ""
        end
      }
      error_page 410 = @uniqueLimit;

      if ($missingToken) {
        return 410;
        break;
      }
      limit_req zone=zone_with_token;
      limit_req_dry_run off;
      default_type text/plain;
      proxy_pass http://localhost:8080/b;
    }

    location @uniqueLimit {
      set_by_lua_block $no_key { return "noKey" }
      limit_req zone=no_token;
      limit_req_dry_run off;
      default_type text/plain;
      content_by_lua_block {
        ngx.say("[No Token or invalid] Hello World")
      }
    }

    location /b {
      default_type text/plain;
      content_by_lua_block {
        ngx.say("[Valid JWT] Hello World")
      }
    }

    location ~ ^/auth/(.*)$ {
      set_by_lua_block $no_key { return "noKey" }
      limit_req zone=no_token burst=20;
      limit_req_dry_run off;

      proxy_pass http://auth-server/$1$is_args$args;
      proxy_pass_request_headers  on;
      proxy_connect_timeout       600;
      proxy_send_timeout          600;
      proxy_read_timeout          600;
      send_timeout                600;
      proxy_set_header X-Forwarded-Host  $host;
    }


  }

  upstream auth-server {
      server auth-server:5000;
  }

}
